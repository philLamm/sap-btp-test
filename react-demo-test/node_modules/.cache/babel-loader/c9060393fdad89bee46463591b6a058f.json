{"ast":null,"code":"var _jsxFileName = \"/home/user/projects/react-frontend-test/react-demo-test/src/pages/MasterPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Box } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getTableData, getTableCount } from \"api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"CategoryName\",\n  headerName: \"CategoryName\",\n  width: 250\n}, {\n  field: \"Description\",\n  headerName: \"Description\",\n  flex: 1\n}, {\n  field: \"CategoryID\",\n  headerName: \"CategoryID\",\n  flex: 1\n}];\nconst PAGE_SIZE = 15;\nexport default function MasterPage() {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false); // Number of rows which exist on the service\n\n  const [rowCount, setRowCount] = useState(0);\n\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setItems([]);\n      setLoading(true);\n\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n\n      const _items = await getTableData({\n        $top: PAGE_SIZE,\n        $skip: skip\n      });\n\n      const itemsWithIds = _items.map((item, index) => {\n        item.id = index;\n        return item;\n      });\n\n      setItems(itemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChanged = ({\n    page\n  }) => {\n    loadData(false, page * PAGE_SIZE);\n  };\n\n  useEffect(() => {\n    // when component mounted\n    loadData(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    disableGutters: true,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      height: \"80vh\",\n      py: 5,\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        loading: loading,\n        rows: items,\n        columns: columns,\n        pageSize: PAGE_SIZE,\n        paginationMode: \"server\",\n        rowCount: rowCount,\n        onPageChange: handlePageChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MasterPage, \"ag1JOf9OHrb/8wiX75ndW0j7HQ4=\");\n\n_c = MasterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MasterPage\");","map":{"version":3,"sources":["/home/user/projects/react-frontend-test/react-demo-test/src/pages/MasterPage.js"],"names":["React","useEffect","useState","Container","Box","DataGrid","getTableData","getTableCount","columns","field","headerName","width","flex","PAGE_SIZE","MasterPage","items","setItems","loading","setLoading","rowCount","setRowCount","loadData","isFirstLoad","skip","count","_items","$top","$skip","itemsWithIds","map","item","index","id","handlePageChanged","page"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,mBAA/B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,KAA5C;;AAEA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,UAAU,EAAE,cAArC;AAAqDC,EAAAA,KAAK,EAAE;AAA5D,CADc,EAEd;AAAEF,EAAAA,KAAK,EAAE,aAAT;AAAwBC,EAAAA,UAAU,EAAE,aAApC;AAAmDE,EAAAA,IAAI,EAAE;AAAzD,CAFc,EAGd;AAAEH,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,UAAU,EAAE,YAAnC;AAAiDE,EAAAA,IAAI,EAAE;AAAvD,CAHc,CAAhB;AAMA,MAAMC,SAAS,GAAG,EAAlB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAFmC,CAInC;;AACA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;;AAEA,QAAMmB,QAAQ,GAAG,OAAOC,WAAP,EAAoBC,IAAI,GAAG,CAA3B,KAAiC;AAChD,QAAI;AACFP,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,UAAII,WAAJ,EAAiB;AACf,cAAME,KAAK,GAAG,MAAMjB,aAAa,EAAjC;AACAa,QAAAA,WAAW,CAACI,KAAD,CAAX;AACD;;AAED,YAAMC,MAAM,GAAG,MAAMnB,YAAY,CAAC;AAChCoB,QAAAA,IAAI,EAAEb,SAD0B;AAEhCc,QAAAA,KAAK,EAAEJ;AAFyB,OAAD,CAAjC;;AAIA,YAAMK,YAAY,GAAGH,MAAM,CAACI,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/CD,QAAAA,IAAI,CAACE,EAAL,GAAUD,KAAV;AACA,eAAOD,IAAP;AACD,OAHoB,CAArB;;AAIAd,MAAAA,QAAQ,CAACY,YAAD,CAAR;AACD,KAlBD,SAkBU;AACRV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAtBD;;AAwBA,QAAMe,iBAAiB,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AACtCb,IAAAA,QAAQ,CAAC,KAAD,EAAQa,IAAI,GAAGrB,SAAf,CAAR;AACD,GAFD;;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAoB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE,QAAC,SAAD;AAAW,IAAA,cAAc,MAAzB;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,MAAM,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAE,CAAvB;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,OAAO,EAAEJ,OADX;AAEE,QAAA,IAAI,EAAEF,KAFR;AAGE,QAAA,OAAO,EAAEP,OAHX;AAIE,QAAA,QAAQ,EAAEK,SAJZ;AAKE,QAAA,cAAc,EAAC,QALjB;AAME,QAAA,QAAQ,EAAEM,QANZ;AAOE,QAAA,YAAY,EAAEc;AAPhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAvDuBnB,U;;KAAAA,U","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Box } from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { getTableData, getTableCount } from \"api\";\n\nconst columns = [\n  { field: \"CategoryName\", headerName: \"CategoryName\", width: 250 },\n  { field: \"Description\", headerName: \"Description\", flex: 1 },\n  { field: \"CategoryID\", headerName: \"CategoryID\", flex: 1 }\n];\n\nconst PAGE_SIZE = 15;\n\nexport default function MasterPage() {\n  const [items, setItems] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  // Number of rows which exist on the service\n  const [rowCount, setRowCount] = useState(0);\n\n  const loadData = async (isFirstLoad, skip = 0) => {\n    try {\n      setItems([]);\n      setLoading(true);\n\n      if (isFirstLoad) {\n        const count = await getTableCount();\n        setRowCount(count);\n      }\n\n      const _items = await getTableData({\n        $top: PAGE_SIZE,\n        $skip: skip\n      });\n      const itemsWithIds = _items.map((item, index) => {\n        item.id = index;\n        return item;\n      });\n      setItems(itemsWithIds);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChanged = ({ page }) => {\n    loadData(false, page * PAGE_SIZE);\n  };\n\n  useEffect(() => {\n    // when component mounted\n    loadData(true);\n  }, []);\n\n  return (\n    <Container disableGutters>\n      <Box height=\"80vh\" py={5}>\n        <DataGrid\n          loading={loading}\n          rows={items}\n          columns={columns}\n          pageSize={PAGE_SIZE}\n          paginationMode=\"server\"\n          rowCount={rowCount}\n          onPageChange={handlePageChanged}\n        />\n      </Box>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}